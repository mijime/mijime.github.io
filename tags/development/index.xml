<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on My snippets</title>
    <link>https://mijime.github.io/tags/development/index.xml</link>
    <description>Recent content in Development on My snippets</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://mijime.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React周りのライブラリのかんそう</title>
      <link>https://mijime.github.io/post/2017-04-09/thoughts-on-react/</link>
      <pubDate>Sun, 09 Apr 2017 22:40:10 +0900</pubDate>
      
      <guid>https://mijime.github.io/post/2017-04-09/thoughts-on-react/</guid>
      <description>

&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mijime/markdown-editor&#34;&gt;https://github.com/mijime/markdown-editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードすればオフラインでも使えるマークダウンエディタを作りたかった&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;使ってよかったもの&#34;&gt;使ってよかったもの&lt;/h2&gt;

&lt;h2 id=&#34;rehype-remark&#34;&gt;Rehype, Remark&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wooorm/rehype&#34;&gt;https://github.com/wooorm/rehype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wooorm/remark&#34;&gt;https://github.com/wooorm/remark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTMLやMarkdownをASTに変換してくれる。&lt;/p&gt;

&lt;p&gt;MarkedがStringを既にがっちゃんこ状態で投げてくるので
dangerouslySetInnerHTMLを使わざるえない影響が出てくる。&lt;/p&gt;

&lt;p&gt;そういうときは上のRehype, RemarkでASTに変換してからReactコンポーネントにするアプローチが良さげ。&lt;/p&gt;

&lt;p&gt;react-markdownていうのもあったけどcommonmarkに準拠してるらしく、テーブルの変換ができなかったので諦めた。
あとcommonmarkが割と容量食ってたのもある。&lt;/p&gt;

&lt;p&gt;remark-reactを使わなかったのはhighlight系のライブラリをかます必要があったのと
markdown -&amp;gt; html -&amp;gt; reactの流れのほうが拡張しやすく感じた。
絵文字対応もさくっといけたし。&lt;/p&gt;

&lt;p&gt;なんかやるとき、もしくはデンジャラスなコードを強要されたときはまた使ってみたい。&lt;/p&gt;

&lt;p&gt;ただ、 markedの方が軽量ではあったので、1回きりの表示ならmarkedのほうが断然良さそう。&lt;/p&gt;

&lt;h2 id=&#34;prism-js&#34;&gt;Prism.js&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://prismjs.com/&#34;&gt;http://prismjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;highlight.jsをMinifyすると中身が飛びでて辛いときに使ったやつ。&lt;/p&gt;

&lt;p&gt;プロセッサも分かれてるのでそのままrehypeに流せた。&lt;/p&gt;

&lt;p&gt;プラッガブルでなかなかに軽量なので、おすすめしていきたい。&lt;/p&gt;

&lt;h2 id=&#34;preact&#34;&gt;Preact&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://preactjs.com/&#34;&gt;https://preactjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reactがでかすぎたので使って見た。 webpack-bundle-size-anlyzerで見る限りだと
ReactDOM + Reactが500+kbなのに対し、 Preact + Preact-compatが35kb前後？　良い。&lt;/p&gt;

&lt;p&gt;React-Reduxは普通に使えたので、 問題はなかった。  React-helmetとかReact-router周りはまだ試していない。
ただ、Preact-helmetやPreact-routerとかあるし、なんだかんだでまた使えそう。&lt;/p&gt;

&lt;p&gt;dio.jsとかも同様も簡単に乗り換えれるか試したけど、 Preact-compatはだいぶ頑張っているのが分かっただけだった。&lt;/p&gt;

&lt;p&gt;JestやStyleGuidistなんかがReactを強要するので、 Webpackでビルド時のみ差し替える運用にした。&lt;/p&gt;

&lt;h2 id=&#34;milligram&#34;&gt;milligram&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://milligram.github.io/&#34;&gt;https://milligram.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;マークダウンプレビューとしては綺麗に表示できるので、
みんなGithub.cssから乗り換えるべきだと思う。軽量ですし。&lt;/p&gt;

&lt;p&gt;ただ、シンプルなコンポーネントしかないので
UIが複雑になってきたならMaterialなんちゃら系の方が良さそう、とは思う&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;見送ったもの&#34;&gt;見送ったもの&lt;/h2&gt;

&lt;h2 id=&#34;highlight-js&#34;&gt;highlight.js&lt;/h2&gt;

&lt;p&gt;みんな言語絞って使ってるくさい。最初、何度圧縮してもクソでかくて不思議だった。
言語によっては圧縮時に飛び出る。 と思ったけどbrowserify使った時は問題なさそう。. だった？&lt;/p&gt;

&lt;p&gt;使うのやめた。&lt;/p&gt;

&lt;h2 id=&#34;codemirror&#34;&gt;CodeMirror&lt;/h2&gt;

&lt;p&gt;重量がなかなかあったので、採用を見送った。 vim mode試したかった。&lt;/p&gt;

&lt;p&gt;もっと軽量なエディタがあれば選択肢に入れたかったので、あとで探す。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;react-setstate&#34;&gt;React.setState&lt;/h2&gt;

&lt;p&gt;ReactのsetStateは使わずにpure componentだけで構成したかったけど、
非同期に描画してコンポーネント内だけで完結するなら、 stateを使って書いた方が切り出しやすかった。&lt;/p&gt;

&lt;h2 id=&#34;flow&#34;&gt;Flow&lt;/h2&gt;

&lt;p&gt;今回は頑張ってFlowtypeに立ち向かってみた。 Flow-jsdocでJSDocと同期をとりつつ、みたいなことを実現したかったが、
type周りが対応してなかったので結局flow-commentをちりばめながら書くはめになった。&lt;/p&gt;

&lt;p&gt;あと、flowさんってcommonjsスタイル読み取ってくれないのが一番のショックだった。
他のライブラリの *.flowにビンビン反応していくのもちょいちょい辛い。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> kanazawa.rb meetup 46に参加した</title>
      <link>https://mijime.github.io/post/study/kanazawa.rb/2016-06-18/</link>
      <pubDate>Sat, 18 Jun 2016 13:23:05 +0900</pubDate>
      
      <guid>https://mijime.github.io/post/study/kanazawa.rb/2016-06-18/</guid>
      <description>

&lt;h2 id=&#34;aws-lambdaを管理するツールlammaやってみた&#34;&gt;AWS Lambdaを管理するツールLammaやってみた&lt;/h2&gt;

&lt;p&gt;Rubyで書かれたlammbaというリポジトリが上がったので
ruby勉強会に参加がてら触ってみた&lt;/p&gt;

&lt;h3 id=&#34;lamma-https-github-com-ayemos-lamma&#34;&gt;&lt;a href=&#34;https://github.com/ayemos/Lamma&#34;&gt;lamma&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;作業リポジトリ&#34;&gt;作業リポジトリ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mijime/mijime.github.io/tree/content/source/study/kanazawa.rb/2016-06-18&#34;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;作業雑感&#34;&gt;作業雑感&lt;/h3&gt;

&lt;p&gt;シンプルなLambda管理ツール&lt;/p&gt;

&lt;h4 id=&#34;pros&#34;&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1 dir,  1 funcなのでわかりやすいね&lt;/li&gt;
&lt;li&gt;勝手にzipしてくれるね&lt;/li&gt;
&lt;li&gt;Rubyなので今後拡張しやすい、のかな？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cons&#34;&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;nodejs, python2.7のみ対応&lt;/li&gt;
&lt;li&gt;消したりするのめんどくさそう &amp;hellip; まぁ関数だけだからいいんだけども &amp;hellip;&lt;/li&gt;
&lt;li&gt;node_modules入ってない？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;作業ログ&#34;&gt;作業ログ&lt;/h3&gt;

&lt;p&gt;まずは環境作成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &amp;quot;https://rubygems.org&amp;quot;

gem &amp;quot;lamma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;FROM ruby

COPY Gemfile /var/app/Gemfile
WORKDIR /var/app
RUN bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---
version: &#39;2&#39;
services:
  app:
    build: .
    command: sleep 3600
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./scripts:/var/app/scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずインストールして実行してみる&lt;/p&gt;

&lt;p&gt;AWS関連の情報を渡して &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval $(cat ~/.aws/credentials | awk -v FS=&amp;quot; = &amp;quot; &#39;$1~/^aws/{print &amp;quot;export&amp;quot;,toupper($1)&amp;quot;=&amp;quot;$2}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数を作成してみる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lamma create scripts/my-function-1 --runtime python2.7

Creating function at directory ./scripts/my-function-1.
bundler: failed to load command: lamma (/usr/local/bundle/bin/lamma)
NoMethodError: undefined method `match&#39; for nil:NilClass
Did you mean?  catch
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/aws-sdk-core/endpoint_provider.rb:67:in `block in partition_matching_region&#39;
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/aws-sdk-core/endpoint_provider.rb:66:in `each&#39;
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/aws-sdk-core/endpoint_provider.rb:66:in `find&#39;
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/aws-sdk-core/endpoint_provider.rb:66:in `partition_matching_region&#39;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うーん &amp;hellip;  なぜにnil &amp;hellip;&lt;/p&gt;

&lt;p&gt;AWS_REGIONを渡す&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/source/study/kanazawa.rb/2016-06-18/docker-compose.yml b/source/study/kanazawa.rb/2016-06-18/docker-compose.yml
index e03b010..2784d3c 100644
--- a/source/study/kanazawa.rb/2016-06-18/docker-compose.yml
+++ b/source/study/kanazawa.rb/2016-06-18/docker-compose.yml
@@ -7,5 +7,6 @@ services:
     environment:
       AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
       AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
+      AWS_REGION: ap-northeast-1
     volumes:
       - ./scripts:/var/app/scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lamma create my-function --runtime python2.7

Creating function at directory ./my-function.
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ tree .

my-function
  ├── lambda_function.py
  └── lamma.conf

1 directory, 2 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだこの時点で関数は作られていないみたい &amp;hellip;  なんでAWS認証求められたんだ&lt;/p&gt;

&lt;p&gt;deployしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lamma deploy test

Loading configuration.
Done.
bundler: failed to load command: lamma (/usr/local/bundle/bin/lamma)
Aws::Lambda::Errors::BadRequest:
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/seahorse/client/plugins/raise_response_errors.rb:15:in `call&#39;
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/aws-sdk-core/plugins/param_converter.rb:20:in `call&#39;
/usr/local/bundle/gems/aws-sdk-core-2.3.14/lib/seahorse/client/plugins/response_target.rb:21:in `call&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うーん &amp;hellip;  ?&lt;/p&gt;

&lt;p&gt;よくわからないのでJSで作り直す&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lamma create my-function-js --runtime nodejs

Creating function at directory ./my-function-js.
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lamma deploy test

Loading configuration.
Done.
Function &#39;my-function-js&#39; doesn&#39;t seem to be exists.
Do you want to create new function &#39;my-function-js&#39; ? (y/n) y
Creating function &#39;my-function-js&#39; ...
bundler: failed to load command: lamma (/usr/local/bundle/bin/lamma)
Errno::ENOENT: No such file or directory @ rb_sysopen - /tmp/d20160618-92-1fppw7/lambda.zip
  /usr/local/bundle/gems/lamma-0.1.1/lib/lamma/function.rb:57:in `initialize&#39;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zip &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/source/study/kanazawa.rb/2016-06-18/Dockerfile b/source/study/kanazawa.rb/2016-06-18/Dockerfile
index f9e4aff..0595f36 100644
--- a/source/study/kanazawa.rb/2016-06-18/Dockerfile
+++ b/source/study/kanazawa.rb/2016-06-18/Dockerfile
@@ -3,3 +3,4 @@ FROM ruby
COPY Gemfile /var/app/Gemfile
WORKDIR /var/app
RUN bundle install
+RUN apt-get update &amp;amp;&amp;amp; apt-get install -y zip
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lamma deploy test

Loading configuration.
Done.
Function &#39;my-function-js&#39; doesn&#39;t seem to be exists.
Do you want to create new function &#39;my-function-js&#39; ? (y/n) y
Creating function &#39;my-function-js&#39; ...
adding: lamma.conf (deflated 17%)
adding: index.js (deflated 45%)
ArgumentError occured. You might need to specify role arn you want to pass to your function via &#39;lamma.conf&#39; file or ENV[&#39;AWS_LAMBDA_IAM_ROLE&#39;].
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほむほむ &amp;hellip; あんましロールを書きたくないのでenvで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AWS_LAMBDA_IAM_ROLE=arn:aws:iam::000000000000:role/lambda_basic_execution
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lamma deploy test

Loading configuration.
Done.
Function &#39;my-function-js&#39; doesn&#39;t seem to be exists.
Do you want to create new function &#39;my-function-js&#39; ? (y/n) y
Creating function &#39;my-function-js&#39; ...
adding: lamma.conf (deflated 17%)
adding: index.js (deflated 45%)
Done.
Setting aliases.
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lamma list-functions

my-function-js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できた。&lt;/p&gt;

&lt;h2 id=&#34;lt感想&#34;&gt;LT感想&lt;/h2&gt;

&lt;h3 id=&#34;シェルチェックを使おう&#34;&gt;シェルチェックを使おう&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;文法がバラバラなので統一する&lt;/li&gt;
&lt;li&gt;各環境でパッケージとして提供されている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;確かにシェルは動かすの簡単だけど、 他の環境で動かないことが多い &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;shunit2を使おう&#34;&gt;shUnit2を使おう&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;対応シェルも幅広い&lt;/li&gt;
&lt;li&gt;ダウンロードするだけで使える！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bats派だけど、 msysでも早いなら乗り換えたいかも&lt;/p&gt;

&lt;h3 id=&#34;dokku&#34;&gt;Dokku&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Heroku like&lt;/li&gt;
&lt;li&gt;前面にnginxがあって、 コンテナにルーティング&lt;/li&gt;
&lt;li&gt;herokuのbuild packsも利用できるので良い！&lt;/li&gt;
&lt;li&gt;運用メンテナンスが気になるところ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スケーリングしないとかで敬遠してたけども、 開発環境で利用するなら楽だよなぁ&lt;/p&gt;

&lt;p&gt;だいぶバージョンアップされているとのことなので、触ってみたい&lt;/p&gt;

&lt;p&gt;もっと利用されるという話なので、その話を聞いてからかな？&lt;/p&gt;

&lt;p&gt;dokku-altとの違いもあとで調べておこう &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;awssummit&#34;&gt;AWSSummit&lt;/h3&gt;

&lt;p&gt;SIerが完全に淘汰されちゃう感じ&lt;/p&gt;

&lt;p&gt;PaaS, SaaSの流行には全然触れてなかったので、 今回の話を機会に調べてみよう &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;iot&#34;&gt;Iot&lt;/h3&gt;

&lt;p&gt;書き込むのに結構ツールが必要なんですね &amp;hellip;&lt;/p&gt;

&lt;p&gt;IOT超絶敷居高い。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>