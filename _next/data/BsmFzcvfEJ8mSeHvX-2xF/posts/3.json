{"pageProps":{"posts":[{"title":"PelicanのPluginの作り方","description":"","date":"2017-10-22T21:32:19+09:00","tags":["pelican"],"draft":false,"slug":"python/create-pelican-plugin","content":"\nregister 関数を用意して、 各イベントの signals に `connect` する\n\n<!--more-->\n\n```python\nfrom pelican import signals\n\ndef register():\n  signals.content_object_init.connect(content_object_init_handler)\n\ndef content_object_init_handler(content):\n  pass\n```\n\nsignals は下記を参照\n\nhttp://docs.getpelican.com/en/3.7.1/plugins.html#list-of-signals\n\n`_content` や `_summary` を書き換える場合は以降のステージで行えば良いとのこと\n\nだが、一度も上手くいっていない\n"},{"title":"Gitがインストールされていない環境でログを取得し、ハンドリングする","description":"","date":"2017-10-22T21:25:19+09:00","tags":["git"],"draft":false,"slug":"python/git-fetch","content":"\nPython の dulwich を使う例が多い\n\n<!--more-->\n\n```python\nfrom dulwich.client import HttpGitClient\nfrom dulwich.repo import MemoryRepo\nfrom urllib.parse import urlparse\nimport itertools\n\ndef fetch_repo(repo=None, url=None):\n    url_object = urlparse(url)\n    client = HttpGitClient(\"://\".join([url_object.scheme, url_object.netloc]))\n    remote_refs = client.fetch(url_object.path, repo)\n    for ref, sha1 in remote_refs.items():\n        repo.refs[ref] = sha1\n    return repo\n\ndef get_first_commit_time(repo):\n    for entry in repo.get_walker():\n        return entry.commit.commit_time\n```\n\n## Reference\n\n- https://github.com/jelmer/dulwich\n- http://ijin.github.io/blog/2016/02/18/ssh-and-git-on-aws-lambda/\n- https://qiita.com/shibataka000/items/910754486ba2585209b2\n"},{"title":"Google tag manager の概要","description":"","date":"2017-10-22T03:07:56+09:00","tags":[],"draft":false,"slug":"seo/about-gtm","content":"\nGoogle tag manager は HTML タグを動的に挿入するサービス。\n\n- 既存の HTML に手を加えなくても管理画面から追加できる\n- 挿入する HTML タグを一元に管理できる\n\nのが強み。\n\n挿入できる HTML タグのテンプレートが用意されており\n\n- google analytics\n- doubleclick\n\nなどはすぐに開始できる。\n\nカスタムの HTML を挿入することも可能。\n\n### Reference\n\n- https://www.google.com/intl/ja/analytics/tag-manager/\n"},{"title":"web-ext を使って WebExtension を始める","description":"","date":"2017-10-14T01:38:45+09:00","tags":[],"draft":false,"slug":"js/getting-started-web-ext","content":"\nweb extension 用のビルドツール `web-ext` があるらしい\n\n[web-ext](https://github.com/mozilla/web-ext)\n\nSigned, Debug がメインのツール。\nビルドは主要ファイルを zip に入れるだけだった\n\n## Install\n\nYarn だと上手くいかない。..? ので `npm` でインストールする\n\n```bash\nnpm install --global web-ext\n```\n\n## Usage\n\nデバッグで確認する\n\n```bash\nweb-ext run --firefox=${FIREFOX_BIN}\n```\n\nビルドする\n\n```bash\nweb-ext build\nweb-ext sign --api-key ${API_KEY} --api-secret ${API_SECRET}\n```\n\n## Reference\n\n- https://github.com/mozilla/web-ext\n- https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Getting_started_with_web-ext\n"},{"title":"Nimble でユニットテストする","description":"","date":"2017-10-13T13:24:00+09:00","tags":[],"draft":false,"slug":"nim/usage-unittest","content":"\n## ファイルの場所\n\ntests フォルダに .nim を配置することで始める\n\nWarning が発生するので SkipDirs に @[\"tests\"] を追加する\n\n`usage-unittest.nimble`\n\n```nim\n# Package\n\nversion       = \"0.1.0\"\nauthor        = \"Anonymous\"\ndescription   = \"usage unit test\"\nlicense       = \"MIT\"\n\n# Dependencies\n\nrequires \"nim >= 0.17.2\"\n\nskipDirs = @[\"tests\"]\n```\n\n## 始め方\n\n`import unittest` を使ってテストする。\n\n`nimble test` でテストを実行。\n\n直列にテストを実行する\n\n| Name     | Desc                     |\n| :------- | :----------------------- |\n| suite    | テスト大項目             |\n| test     | テスト小項目             |\n| setup    | 各テスト前に実行すること |\n| teardown | 各テスト後に実行すること |\n\n`tests/test.nim`\n\n```nim\nimport unittest\n\nsuite \"hello\":\n   test \"yes\":\n     require(true)\n```\n\n## Reference\n\n- https://nim-lang.org/docs/unittest.html\n"}],"postCount":31,"page":3},"__N_SSG":true}