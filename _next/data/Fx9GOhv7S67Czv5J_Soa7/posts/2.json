{"pageProps":{"posts":[{"title":"PelicanのPluginの作り方","description":"","date":"2017-10-22T21:32:19+09:00","tags":["pelican"],"draft":false,"slug":"python/create-pelican-plugin","content":"\nregister 関数を用意して、 各イベントの signals に `connect` する\n\n<!--more-->\n\n```python\nfrom pelican import signals\n\ndef register():\n  signals.content_object_init.connect(content_object_init_handler)\n\ndef content_object_init_handler(content):\n  pass\n```\n\nsignals は下記を参照\n\nhttp://docs.getpelican.com/en/3.7.1/plugins.html#list-of-signals\n\n`_content` や `_summary` を書き換える場合は以降のステージで行えば良いとのこと\n\nだが、一度も上手くいっていない\n"},{"title":"Gitがインストールされていない環境でログを取得し、ハンドリングする","description":"","date":"2017-10-22T21:25:19+09:00","tags":["git"],"draft":false,"slug":"python/git-fetch","content":"\nPython の dulwich を使う例が多い\n\n<!--more-->\n\n```python\nfrom dulwich.client import HttpGitClient\nfrom dulwich.repo import MemoryRepo\nfrom urllib.parse import urlparse\nimport itertools\n\ndef fetch_repo(repo=None, url=None):\n    url_object = urlparse(url)\n    client = HttpGitClient(\"://\".join([url_object.scheme, url_object.netloc]))\n    remote_refs = client.fetch(url_object.path, repo)\n    for ref, sha1 in remote_refs.items():\n        repo.refs[ref] = sha1\n    return repo\n\ndef get_first_commit_time(repo):\n    for entry in repo.get_walker():\n        return entry.commit.commit_time\n```\n\n## Reference\n\n- https://github.com/jelmer/dulwich\n- http://ijin.github.io/blog/2016/02/18/ssh-and-git-on-aws-lambda/\n- https://qiita.com/shibataka000/items/910754486ba2585209b2\n"},{"title":"Google tag manager の概要","description":"","date":"2017-10-22T03:07:56+09:00","tags":[],"draft":false,"slug":"seo/about-gtm","content":"\nGoogle tag manager は HTML タグを動的に挿入するサービス。\n\n- 既存の HTML に手を加えなくても管理画面から追加できる\n- 挿入する HTML タグを一元に管理できる\n\nのが強み。\n\n挿入できる HTML タグのテンプレートが用意されており\n\n- google analytics\n- doubleclick\n\nなどはすぐに開始できる。\n\nカスタムの HTML を挿入することも可能。\n\n### Reference\n\n- https://www.google.com/intl/ja/analytics/tag-manager/\n"},{"title":"web-ext を使って WebExtension を始める","description":"","date":"2017-10-14T01:38:45+09:00","tags":[],"draft":false,"slug":"js/getting-started-web-ext","content":"\nweb extension 用のビルドツール `web-ext` があるらしい\n\n[web-ext](https://github.com/mozilla/web-ext)\n\nSigned, Debug がメインのツール。\nビルドは主要ファイルを zip に入れるだけだった\n\n## Install\n\nYarn だと上手くいかない。..? ので `npm` でインストールする\n\n```bash\nnpm install --global web-ext\n```\n\n## Usage\n\nデバッグで確認する\n\n```bash\nweb-ext run --firefox=${FIREFOX_BIN}\n```\n\nビルドする\n\n```bash\nweb-ext build\nweb-ext sign --api-key ${API_KEY} --api-secret ${API_SECRET}\n```\n\n## Reference\n\n- https://github.com/mozilla/web-ext\n- https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Getting_started_with_web-ext\n"},{"title":"Nimble でユニットテストする","description":"","date":"2017-10-13T13:24:00+09:00","tags":[],"draft":false,"slug":"nim/usage-unittest","content":"\n## ファイルの場所\n\ntests フォルダに .nim を配置することで始める\n\nWarning が発生するので SkipDirs に @[\"tests\"] を追加する\n\n`usage-unittest.nimble`\n\n```nim\n# Package\n\nversion       = \"0.1.0\"\nauthor        = \"Anonymous\"\ndescription   = \"usage unit test\"\nlicense       = \"MIT\"\n\n# Dependencies\n\nrequires \"nim >= 0.17.2\"\n\nskipDirs = @[\"tests\"]\n```\n\n## 始め方\n\n`import unittest` を使ってテストする。\n\n`nimble test` でテストを実行。\n\n直列にテストを実行する\n\n| Name     | Desc                     |\n| :------- | :----------------------- |\n| suite    | テスト大項目             |\n| test     | テスト小項目             |\n| setup    | 各テスト前に実行すること |\n| teardown | 各テスト後に実行すること |\n\n`tests/test.nim`\n\n```nim\nimport unittest\n\nsuite \"hello\":\n   test \"yes\":\n     require(true)\n```\n\n## Reference\n\n- https://nim-lang.org/docs/unittest.html\n"},{"title":"Nim の main 関数の処理方法について","description":"","date":"2017-10-12T13:53:00+09:00","tags":[],"draft":false,"slug":"nim/main-args","content":"\n<!--more-->\n\n## 各パラメータ概要\n\n| 用途                           | 名                    | 型                 | module |\n| :----------------------------- | :-------------------- | :----------------- | :----- |\n| メイン関数として呼ばれているか | `isMainModule`        | bool               | system |\n| メイン関数の戻り値             | `programResult`       | int                | system |\n| 引数の数                       | `paramCount()`        | int                | os     |\n| 引数の値                       | `commandLineParams()` | seq[TaintedString] | os     |\n\n## Reference\n\n- https://nim-lang.org/docs/system.html\n- https://nim-lang.org/docs/os.html\n- https://qiita.com/6in/items/c735cb2ffbe79f3f9d94\n"},{"title":"Clojure から GRPC とか ProtoBuf を触ってみる","description":"","date":"2017-09-17T07:48:28+09:00","tags":["development","clojure"],"draft":true,"slug":"2017/09/17/clojure-use-protobuf","content":"\n# Grpc ?\n\n- https://grpc.io/docs/\n\n# Protocol Buffers ?\n\n- https://developers.google.com/protocol-buffers/\n\n## 触るモチベーション\n\n- HTTP2 っていうのが早いらしい\n- 分散するらしい\n- RPC 系を一度は触っておきたい\n\n# Tutorial\n\n- https://developers.google.com/protocol-buffers/docs/javatutorial\n\n  - ProtoBuf 2.x 系だったのでちょっと古め\n\n- https://grpc.io/docs/quickstart/java.html\n- https://grpc.io/docs/tutorials/basic/java.html\n\n  - Grpc のチュートリアル\n\n- https://github.com/grpc/grpc-java/tree/master/examples\n\n  - Grpc のチュートリアルのリポジトリ\n\n## 依存関係\n\n```clojure\n(defproject clojure-protobuf-test \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.8.0\"]\n                 [com.google.protobuf/protobuf-java \"3.3.0\"]\n                 [com.google.api.grpc/proto-google-common-protos \"0.1.9\"]\n                 [io.grpc/grpc-netty \"1.6.1\"\n                  :exclusions [io.netty/netty-codec-http2\n                               io.grpc/grpc-core]]\n                 [io.grpc/grpc-protobuf \"1.6.1\"]\n                 [io.grpc/grpc-stub \"1.6.1\"]]\n\n  :source-paths [\"src/main/clojure\"]\n  :test-paths [\"src/test/clojure\"]\n  :resource-paths [\"src/main/resource\"]\n  :java-source-paths [\"gen/main/java\" \"gen/main/grpc\"]\n  :javac-options [\"-target\" \"1.8\" \"-source\" \"1.8\"]\n  :aot :all\n  )\n```\n\n# その他メモ\n\n## Clojure で JavaClass の継承\n\n- Clojure で Java クラスの継承などしてみる\n  http://qiita.com/FScoward/items/ede5b4c0c98111c219bf\n\n## InnterClass の参照方法\n\n- A\\$B で指定する必要あり\n- `:extends` に指定する場合はパッケージ名じゃないと難しそう\n"},{"title":"Azure Resource Managerを通じてAzureを学ぶ","description":"","date":"2017-09-16T07:48:28+09:00","tags":["development","azure"],"draft":false,"slug":"2017/09/16","content":"\n## Azure におけるテンプレートの立ち位置\n\nAzureizm では `Azure Resource Manager` と呼ぶらしい。\n\n- https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/\n\n## ソース\n\nAzure Quickstart Templates\n\n- https://github.com/Azure/azure-quickstart-templates\n\n## 進め方\n\n下の URL をなぞって勉強することにする\n\n- Resource Manager テンプレートと Azure CLI を使用したリソースのデプロイ\n\n  - https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/resource-group-template-deploy-cli\n\n今回は azure-cli を使ったので `az` を `azure` に読み替えて実行。\n\n- https://github.com/Azure/azure-cli\n\nロケーションは `Japan East` を使うことにした。\n\n- https://azure.microsoft.com/ja-jp/regions/\n\nテンプレートは ContainerService のサンプルを使うようにする\n\n- 101-acs-swarm\n\nと思ったけどリージョン制限があった。。ここで冒険はおしまい\n\n### vmSize がらみの悩み\n\nvmSize は `Standard_XXX` でいいのかしら\n\n- `Standard_B1MS` ではダメだった。プレビューだから、なのかな\n- `Standard_A1_v2` はリージョン依存\n- 結構制限があった。悲しい\n- そもそもマスタ用の vmSize が。。というところのよう。辛い\n\n### Template がらみの悩み\n\nSSHPublicKey は RSA じゃないとダメ\n\n### Azure-Cli がらみの悩み\n\n`validate`コマンドが使えない。。だと。。\n\n参考 URL では@を使っていたけど azure-cli では\nパラメータファイルを指定する場合は `--parameters-file` を使う。\n\n## 料金\n\n押さえておかないと辛そう\n\n- https://azure.microsoft.com/ja-jp/pricing/details/virtual-machines/linux/\n\n## Documentation\n\nリファレンス\n\n- https://docs.microsoft.com/ja-jp/azure/templates/\n\n## サービス\n\nMicrosoft.ContainerService/containerServices\n\n- https://azure.microsoft.com/ja-jp/services/container-service/\n\nMicrosoft.ServiceFabric/clusters\n\n- https://azure.microsoft.com/ja-jp/services/service-fabric/\n\n## AWS の比較\n\n- https://docs.microsoft.com/ja-jp/azure/architecture/aws-professional/services\n"},{"title":"JSの正規表現の再帰にはまった","description":"","date":"2017-04-20T07:48:28+09:00","tags":["development","javascript"],"draft":false,"slug":"2017/04/20/regexp-recursive","content":"\nのでメモる\n\n再帰的に正規表現で抜き出して詰めたい場合があるとする。\n\n<!--more-->\n\n```js\nfunction regexpr(re, text, acc = []) {\n  const res = re.exec(text)\n  return res\n    ? regexpr(\n        re,\n        text.substr(res.index + res[0].length, text.length),\n        acc.concat(res)\n      )\n    : acc\n}\n```\n\nこのとき chrome さんだと、 g オプションつけた時で結果が異なる。\n\n```js\nregexpr(/hello|world/, 'hello world') // => [\"hello\", \"world\"]\nregexpr(/hello|world/g, 'hello world') // => [\"hello\"]\nregexpr(/hello|world/, 'hello world hello world') // => [\"hello\", \"world\", \"hello\", \"world\"]\nregexpr(/hello|world/g, 'hello world hello world') // => [\"hello\", \"hello\"]\n```\n\nindex や結果は変わらないのに、なんでだろう\n"},{"title":"docker compose 3","description":"","date":"2017-04-11T10:25:47+09:00","tags":["development","golang"],"draft":false,"slug":"2017/04/11/docker-compose-3","content":"\nいつバージョン 3 になったんだ、、あとで差分チェックする\n"}],"postCount":31,"page":2},"__N_SSG":true}