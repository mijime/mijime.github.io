{"pageProps":{"posts":[{"title":"macOSからChromeOSに移行したけど、いろいろ辛かった","description":"","date":"2019-12-25T01:23:33+09:00","tags":["development"],"draft":false,"slug":"2019/12/25","content":"\n初めての ChromeOS だったのでいろいろハマった\n\n<!--more-->\n\n## 標準ターミナルで日本語打つとぶっ壊れる\n\nそもそも標準ターミナルで日本語の切り替え方がわからずにハマった。\n\n- https://chromium.googlesource.com/apps/libapps/+/master/hterm/doc/KeyboardBindings.md\n\nSecure Shell app のほうの keybidings で`Ctrl-Space`を送信できれば解決できた。\n\nfcitx で解決、みたいな記事をよくみかけたけど、自分は解決できなかった。\n\n下記の設定を keybindings にいれた。\n\n```\n{\n    \"keybindings\": {\n        \"Ctrl-Space\": \"DEFAULT\"\n    }\n}\n```\n\nただ、実際に日本語で送信してみると、補完入力とターミナルのバッファが\nごっちゃになっているように見える。\n補完の内容がバッファに残ったままだったり、tmux の window-size がおかしくなったりと辛い。\n\nvim 内であれば Ctrl-L でリセットできる。日本語入力中は辛いが。\n\n## Alacritty で絵文字表示されない\n\n上の問題があって、Terminal を Alacritty + fcitx を採用したけど、ここでも問題があった。\n\nデフォルトだと WAYLAND?の設定が良くないらしく、fcitx が立ち上がらなかったり、\n全画面起動ができなかった。\n\nWAYLAND を空白で起動すれば解決した。\n毎回ターミナルから alacritty を立ち上げるのは嫌なので alacritty.desktop を用意した。\n\n```\n[Desktop Entry]\nType=Application\nTryExec=alacritty\nExec=env WAYLAND_DISPLAY= alacritty\nIcon=Alacritty\nTerminal=false\nCategories=System;TerminalEmulator;\n\nName=Alacritty\nGenericName=Terminal\nComment=A cross-platform, GPU enhanced terminal emulator\nStartupWMClass=Alacritty\nActions=New;\n\n[Desktop Action New]\nName=New Terminal\nExec=env WAYLAND_DISPLAY= alacritty\n```\n\nfcitx 自体は立ち上がるようになったけど、今度は絵文字がうまく表示されず。\n\nAlacritty 自体に同様の Issue が結構上がっていて、MacOS の絵文字はうまくいくんだけど。。みたいな内容で終わっていたように見える。\n\nカラフルな絵文字は諦めたが、さすがに空白だと辛いので `twemoji-color-font` を入れて\nstarship に設定していた絵文字は全部表示できるようにした。\n\n## 音楽が再生できない\n\nmpv を入れたけど、今度はターミナルから音楽がならない。\nコンテナを`--enable-audio-capture`して起動しないといけないらしい。\n\n- https://chromium.googlesource.com/chromiumos/docs/+/master/containers_and_vms.md#is-audio-capture-e_g_microphone_supported\n\ncrosh 上で\n\n```\nvmc stop termina\nvmc start termina --enable-audio-capture\n```\n\nすれば解決した。\n\nその後、Alacritty が透過できない+画面最大化できない、という症状になったけど\nこれは Logout->Login で治った。\n\n思ったより、音楽を鳴らすのに CPU を使っているけど。。pluse なんぞや。。\n"},{"title":"circleci local で死ぬパターン","description":"","date":"2019-03-07T00:38:33+09:00","tags":["development"],"draft":false,"slug":"2019/03/07","content":"\ncircleci は通るけど、`circleci local` で死ぬパターンがある。\n\n<!--more-->\n\n- ファイル数が `xargs` の上限を超える\n\n  ローカルのファイルを `git ls-files | xargs tar cfz - | tar xfz -C`\n  みたいな感じで所定のリポジトリに移動している。\n  なので `xargs` の引数を超過すると死ぬ\n\n- Git コマンドを使用する\n\n  `git ls-files` でファイルだけを持っているので、ビルドタスクで\n  `git submodule` や `git commit && git push` があると死ぬ\n\n素直に docker とかで別途テストできる環境を用意しておくのが吉。\n"},{"title":"vim-lspはじめました","description":"","date":"2019-02-28T01:49:54+09:00","tags":["development"],"draft":false,"slug":"2019/02/28","content":"\n今まで `faith/vim-go` をありがたく使わせてもらっていたけど\n`GO111MODULE=on` のときの挙動が気になったので `prabirshrestha/vim-lsp` に移行した\n\n<!--more-->\n\n1. Wiki に全部書いてあるのでそれをコピる\n\n2. `go get -u github.com/saibing/bingo` で bingo をインストールしておく\n\n3. `<C-]>` などの key mapping を設定する\n\n```vim\n\" ...\nPlug 'prabirshrestha/async.vim'\nPlug 'prabirshrestha/vim-lsp'\nif executable('bingo')\n    augroup LspGo\n        au!\n        autocmd User lsp_setup call lsp#register_server({\n            \\ 'name': 'go-lang',\n            \\ 'cmd': {server_info->['bingo', '-mode', 'stdio']},\n                      \\ 'whitelist': ['go'],\n                                  \\ })\n        autocmd FileType go setlocal noexpandtab\n        autocmd FileType go setlocal omnifunc=lsp#complete\n        autocmd FileType go nmap <C-]> :LspDefinition<CR>\n        autocmd FileType go nmap K :LspHover<CR>\n        autocmd FileType go nmap ]] :LspDocumentSymbol<CR>\n        autocmd BufWritePre *.go LspDocumentFormatSync\n    augroup END\nendif\n\" ...\n```\n"},{"title":"リモートワーク用の環境を構築するときはアカウントを分けるとよさそう","description":"","date":"2019-02-16T14:56:38+09:00","tags":["development"],"draft":false,"slug":"2019/02/16","content":"\n最近リモート用の環境を私物の PC に構築した。\n\nその時にアカウントを分けて、ブックマークとか作業環境を混ざらないようにしたが\n色々やることがあったのでメモっておく\n\n<!--more-->\n\n## brew の設定を分ける\n\nデフォルトだと `/usr/local` に全て入ってアカウント共有になってしまう。\n\nそうすると更新するたびに`sudo`権限を求められてしまうため、アカウント毎に `brew` を設定した。\n\n`brew` を別ディレクトリに置けば、勝手に`BREW_HOME`を親ディレクトリに設定してくれる。\n\n```bash\nmkdir -p \"${HOME}/.brew\"\ncurl -L https://github.com/Homebrew/brew/archive/master.tar.gz \\\n         | tar xz --strip-components=1 -C \"${HOME}/.brew\"\nexport PATH=${HOME}/.brew/bin:${PATH}\n```\n\n## dotfiles を共有する\n\n会社用の Github アカウントを新規で作成したが、さすがに dotfiles は常々更新するので、\n同じものを使いたい。\n\n`git config core.sshCommand`で個別に鍵を指定した。\n\n```bash\nmkdir -p ~/.ssh/projects/github.com/\nssh-keygen -t ed25519 -N \"\" -C \"\" -f ~/.ssh/projects/github.com/${USER}_id_ed25519\ngit config core.sshCommand \"ssh -i ~/.ssh/projects/github.com/${USER}_id_ed25519\"\n```\n\n## PS1 に icon を設定する\n\n`su` で雑にアカウントを往復することがあるんだけども、名前は違えど色味がほぼほぼ同じなので\n'あれ、どっちで作業しているんだっけ…'的なことが時々起こる\n\n名前からランダムに絵文字を設定してみた。\n\n```bash\nicon=$(echo -ne $((127744 + 16#$(whoami|md5sum|cut -c-8)%512))|awk '{printf(\"%3c\",$1)}')\n```\n\nこれを適当に PS1 に入れておけば、間違えにくくなる\n\n## セキュアなデータを GoogleDrive にいれて Git で管理する\n\nだいぶ Bad Practice な気がするが、パスワードとか ssh-key とかは全部 Git のリポジトリにして管理している。\n\nそれを一旦 GoogleDrive とかにぶち込んで別端末に持ってきた。\n\nさすがに内容が内容なので、`git encrypt` コマンドを作って暗号化してみた\n\nhttps://github.com/kojimat/git-encrypt\n"},{"title":"Clojure から GRPC とか ProtoBuf を触ってみる","description":"","date":"2017-09-17T07:48:28+09:00","tags":["development","clojure"],"draft":true,"slug":"2017/09/17/clojure-use-protobuf","content":"\n# Grpc ?\n\n- https://grpc.io/docs/\n\n# Protocol Buffers ?\n\n- https://developers.google.com/protocol-buffers/\n\n## 触るモチベーション\n\n- HTTP2 っていうのが早いらしい\n- 分散するらしい\n- RPC 系を一度は触っておきたい\n\n# Tutorial\n\n- https://developers.google.com/protocol-buffers/docs/javatutorial\n\n  - ProtoBuf 2.x 系だったのでちょっと古め\n\n- https://grpc.io/docs/quickstart/java.html\n- https://grpc.io/docs/tutorials/basic/java.html\n\n  - Grpc のチュートリアル\n\n- https://github.com/grpc/grpc-java/tree/master/examples\n\n  - Grpc のチュートリアルのリポジトリ\n\n## 依存関係\n\n```clojure\n(defproject clojure-protobuf-test \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.8.0\"]\n                 [com.google.protobuf/protobuf-java \"3.3.0\"]\n                 [com.google.api.grpc/proto-google-common-protos \"0.1.9\"]\n                 [io.grpc/grpc-netty \"1.6.1\"\n                  :exclusions [io.netty/netty-codec-http2\n                               io.grpc/grpc-core]]\n                 [io.grpc/grpc-protobuf \"1.6.1\"]\n                 [io.grpc/grpc-stub \"1.6.1\"]]\n\n  :source-paths [\"src/main/clojure\"]\n  :test-paths [\"src/test/clojure\"]\n  :resource-paths [\"src/main/resource\"]\n  :java-source-paths [\"gen/main/java\" \"gen/main/grpc\"]\n  :javac-options [\"-target\" \"1.8\" \"-source\" \"1.8\"]\n  :aot :all\n  )\n```\n\n# その他メモ\n\n## Clojure で JavaClass の継承\n\n- Clojure で Java クラスの継承などしてみる\n  http://qiita.com/FScoward/items/ede5b4c0c98111c219bf\n\n## InnterClass の参照方法\n\n- A\\$B で指定する必要あり\n- `:extends` に指定する場合はパッケージ名じゃないと難しそう\n"}],"postCount":12,"page":1,"tagName":"development"},"__N_SSG":true}