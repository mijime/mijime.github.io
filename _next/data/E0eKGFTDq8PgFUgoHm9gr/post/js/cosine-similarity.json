{"pageProps":{"siteName":"My snippets","source":{"compiledSource":"var u=Object.defineProperty,l=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var p=(e,t,c)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[t]=c,r=(e,t)=>{for(var c in t||(t={}))s.call(t,c)&&p(e,c,t[c]);if(n)for(var c of n(t))a.call(t,c)&&p(e,c,t[c]);return e},i=(e,t)=>l(e,d(t));var m=(e,t)=>{var c={};for(var o in e)s.call(e,o)&&t.indexOf(o)<0&&(c[o]=e[o]);if(e!=null&&n)for(var o of n(e))t.indexOf(o)<0&&a.call(e,o)&&(c[o]=e[o]);return c};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(c){var o=c,{components:e}=o,t=m(o,[\"components\"]);return mdx(MDXLayout,i(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"\\u4ED6\\u306E\\u30D6\\u30ED\\u30B0\\u3092\\u53C2\\u8003\\u306B\\u3059\\u308B\\u3068\\u95A2\\u9023\\u8A18\\u4E8B\\u3068\\u3044\\u3046\\u306E\\u3092\\u6700\\u5F8C\\u306B\\u8868\\u793A\\u3057\\u3066\\u3044\\u308B\\u3089\\u3057\\u3044\\u3002\"),mdx(\"p\",null,\"\\u307E\\u3060\\u8A18\\u4E8B\\u306E\\u6570\\u306F\\u5C11\\u306A\\u3044\\u3051\\u3069\\u3001\\u3042\\u308B\\u7A0B\\u5EA6\\u8FD1\\u3044\\u8A18\\u4E8B\\u3092\\u63A2\\u3059\\u3053\\u3068\\u304C\\u3067\\u304D\\u308B\\u3088\\u3046\\u306B\\u3059\\u308B\\u3002\"),mdx(\"h3\",null,\"\\u985E\\u4F3C\\u5EA6\\u306E\\u53D6\\u5F97\"),mdx(\"p\",null,'\"MeCab\" + \"\\u985E\\u4F3C\" \\u3067\\u30B0\\u30B0\\u3063\\u305F\\u3089\\u3001\\u30B3\\u30B5\\u30A4\\u30F3\\u985E\\u4F3C\\u5EA6\\u306A\\u308B\\u3082\\u306E\\u304C\\u3042\\u308B\\u3068\\u306E\\u3053\\u3068\\u3002'),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",r({parentName:\"li\"},{href:\"http://www.cse.kyoto-su.ac.jp/~g0846020/keywords/cosinSimilarity.html\"}),\"\\u30B3\\u30B5\\u30A4\\u30F3\\u985E\\u4F3C\\u5EA6\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",r({parentName:\"li\"},{href:\"http://qiita.com/nmbakfm/items/6bb91b89571dd68fcea6\"}),\"TF-IDF Cos \\u985E\\u4F3C\\u5EA6\\u63A8\\u5B9A\\u6CD5\"))),mdx(\"p\",null,`\\u3053\\u306E\\u30D6\\u30ED\\u30B0\\u306F js + hugo \\u3067\\u66F8\\u3044\\u3066\\u3044\\u308B\\u306E\\u3067\\u3001\n`,mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.npmjs.com/package/kuromoji\"}),\"kuromoji\"),` \\u306E\\u30E9\\u30C3\\u30D1\\u30FC\n`,mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.npmjs.com/package/kuromojin\"}),\"kuromojin\"),\" \\u3092\\u4F7F\\u3063\\u3066\\u5F62\\u614B\\u7D20\\u89E3\\u6790\\u3059\\u308B\\u3002\"),mdx(\"h3\",null,\"\\u30B3\\u30FC\\u30C9\\u89E3\\u8AAC\"),mdx(\"p\",null,mdx(\"a\",r({parentName:\"p\"},{href:\"https://github.com/mijime/mijime.github.io/blob/content/source/js/similarity/index.js\"}),\"\\u30B3\\u30FC\\u30C9\\u5168\\u4F53\")),mdx(\"p\",null,\"\\u30C6\\u30AD\\u30B9\\u30C8\\u3092\\u5206\\u89E3\\u3057\\u3066\\u3001 \\u5358\\u8A9E\\u3068\\u51FA\\u73FE\\u56DE\\u6570\\u3092\\u8A18\\u9332\\u3059\\u308B\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`async function parseVector(text) {\n  const tokens = await tokenize(text)\n  return tokens.reduce((acc, next) => {\n    if (!isTargetToken(next)) {\n      return acc\n    }\n\n    if (acc[next.surface_form]) {\n      acc[next.surface_form]++\n    } else {\n      acc[next.surface_form] = 1\n    }\n\n    return acc\n  }, {})\n}\n`)),mdx(\"p\",null,\"\\u51FA\\u73FE\\u56DE\\u6570\\u3092\\u6570\\u3048\\u308B\\u306E\\u306F\\u540D\\u8A5E\\u3067 3 \\u6587\\u5B57\\u4EE5\\u4E0A\\u306E\\u5358\\u8A9E\\u306E\\u307F\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`function isTargetToken(token) {\n  return (\n    token.pos === '\\u540D\\u8A5E' &&\n    token.surface_form.length >= 3 &&\n    (token.basic_form !== '*' || token.surface_form.match(/^[\\\\wA-Z]+$/))\n  )\n}\n`)),mdx(\"p\",null,\"\\u3042\\u3068\\u306F\\u8A08\\u7B97\\u3057\\u3066\\u304A\\u3057\\u307E\\u3044\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-javascript\"}),`function cosineSimilarity(curr, next) {\n  const currKeys = Object.keys(curr)\n  const nextKeys = Object.keys(next)\n  const keys = currKeys\n    .concat(nextKeys)\n    .filter((v, i, self) => self.indexOf(v) === i)\n\n  const baseScore = keys\n    .map(k => (curr[k] || 0) * (next[k] || 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const currScore = keys\n    .map(k => (curr[k] ? Math.pow(curr[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const nextScore = keys\n    .map(k => (next[k] ? Math.pow(next[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const score = baseScore\n    ? baseScore / (Math.sqrt(currScore) * Math.sqrt(nextScore))\n    : 0\n  const words = keys.filter(k => curr[k] && next[k])\n  return { score, words }\n}\n`)),mdx(\"h3\",null,\"\\u5B9F\\u884C\\u7D50\\u679C\"),mdx(\"p\",null,\"\\u3046\\u30FC\\u3093\\u3001\\u5168\\u7136\\u95A2\\u4FC2\\u306A\\u3044\\u5358\\u8A9E\\u3067\\u3057\\u304B\\u4E00\\u81F4\\u3057\\u306A\\u3044\\u3002\\u305D\\u306E\\u901A\\u308A\\u3067\\u306F\\u3042\\u308B\\u3093\\u3060\\u3051\\u3069\\u3002\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{}),`babel-node source/js/similarity \"content/posts/js/cosine-similarity.md\" \"content\"\n\n25.26%  content\\\\posts\\\\2016-05-23\\\\github-cli.md  com, https, mijime, github\n0%      content\\\\posts\\\\2016-05-26\\\\border-implement.md\n0%      content\\\\posts\\\\2016-05-26\\\\ci-is-difficult.md\n0%      content\\\\posts\\\\blog\\\\first-blogged.md\n0%      content\\\\posts\\\\hugo\\\\code-mermaid.md\n20.9%   content\\\\posts\\\\hugo\\\\hugo-deploy.md       branch, content\n100%    content\\\\posts\\\\js\\\\cosine-similarity.md   100, 2016, 89571, MeCab, \\u30B3\\u30B5\\u30A4\\u30F3\n9.93%   content\\\\posts\\\\blog\\\\blog-of-policy.md    branch, posts, slides\n1.98%   content\\\\posts\\\\hugo\\\\hugo-pagination.md   html, pagination\n3.52%   content\\\\slides\\\\2016-05-27\\\\my-first-slide.md     html\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"関連記事を探す","description":"\n他のブログを参考にすると関連記事というのを最後に表示しているらしい。\n\nまだ記事の数は少ないけど、ある程度近い記事を探すことができるようにする。\n\n### 類似度の取得\n\n\"MeCab\" + \"類似","createdAt":"2016-05-28T12:12:36.000Z","tags":["development","javascript"],"draft":false,"slug":"js/cosine-similarity","content":"\n他のブログを参考にすると関連記事というのを最後に表示しているらしい。\n\nまだ記事の数は少ないけど、ある程度近い記事を探すことができるようにする。\n\n### 類似度の取得\n\n\"MeCab\" + \"類似\" でググったら、コサイン類似度なるものがあるとのこと。\n\n- [コサイン類似度](http://www.cse.kyoto-su.ac.jp/~g0846020/keywords/cosinSimilarity.html)\n- [TF-IDF Cos 類似度推定法](http://qiita.com/nmbakfm/items/6bb91b89571dd68fcea6)\n\nこのブログは js + hugo で書いているので、\n[kuromoji](https://www.npmjs.com/package/kuromoji) のラッパー\n[kuromojin](https://www.npmjs.com/package/kuromojin) を使って形態素解析する。\n\n### コード解説\n\n[コード全体](https://github.com/mijime/mijime.github.io/blob/content/source/js/similarity/index.js)\n\nテキストを分解して、 単語と出現回数を記録する。\n\n```javascript\nasync function parseVector(text) {\n  const tokens = await tokenize(text)\n  return tokens.reduce((acc, next) => {\n    if (!isTargetToken(next)) {\n      return acc\n    }\n\n    if (acc[next.surface_form]) {\n      acc[next.surface_form]++\n    } else {\n      acc[next.surface_form] = 1\n    }\n\n    return acc\n  }, {})\n}\n```\n\n出現回数を数えるのは名詞で 3 文字以上の単語のみ。\n\n```javascript\nfunction isTargetToken(token) {\n  return (\n    token.pos === '名詞' &&\n    token.surface_form.length >= 3 &&\n    (token.basic_form !== '*' || token.surface_form.match(/^[\\wA-Z]+$/))\n  )\n}\n```\n\nあとは計算しておしまい。\n\n```javascript\nfunction cosineSimilarity(curr, next) {\n  const currKeys = Object.keys(curr)\n  const nextKeys = Object.keys(next)\n  const keys = currKeys\n    .concat(nextKeys)\n    .filter((v, i, self) => self.indexOf(v) === i)\n\n  const baseScore = keys\n    .map(k => (curr[k] || 0) * (next[k] || 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const currScore = keys\n    .map(k => (curr[k] ? Math.pow(curr[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const nextScore = keys\n    .map(k => (next[k] ? Math.pow(next[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const score = baseScore\n    ? baseScore / (Math.sqrt(currScore) * Math.sqrt(nextScore))\n    : 0\n  const words = keys.filter(k => curr[k] && next[k])\n  return { score, words }\n}\n```\n\n### 実行結果\n\nうーん、全然関係ない単語でしか一致しない。その通りではあるんだけど。\n\n```\nbabel-node source/js/similarity \"content/posts/js/cosine-similarity.md\" \"content\"\n\n25.26%  content\\posts\\2016-05-23\\github-cli.md  com, https, mijime, github\n0%      content\\posts\\2016-05-26\\border-implement.md\n0%      content\\posts\\2016-05-26\\ci-is-difficult.md\n0%      content\\posts\\blog\\first-blogged.md\n0%      content\\posts\\hugo\\code-mermaid.md\n20.9%   content\\posts\\hugo\\hugo-deploy.md       branch, content\n100%    content\\posts\\js\\cosine-similarity.md   100, 2016, 89571, MeCab, コサイン\n9.93%   content\\posts\\blog\\blog-of-policy.md    branch, posts, slides\n1.98%   content\\posts\\hugo\\hugo-pagination.md   html, pagination\n3.52%   content\\slides\\2016-05-27\\my-first-slide.md     html\n```\n"}},"post":{"title":"関連記事を探す","description":"\n他のブログを参考にすると関連記事というのを最後に表示しているらしい。\n\nまだ記事の数は少ないけど、ある程度近い記事を探すことができるようにする。\n\n### 類似度の取得\n\n\"MeCab\" + \"類似","createdAt":"2016-05-28T12:12:36.000Z","tags":["development","javascript"],"draft":false,"slug":"js/cosine-similarity","content":"\n他のブログを参考にすると関連記事というのを最後に表示しているらしい。\n\nまだ記事の数は少ないけど、ある程度近い記事を探すことができるようにする。\n\n### 類似度の取得\n\n\"MeCab\" + \"類似\" でググったら、コサイン類似度なるものがあるとのこと。\n\n- [コサイン類似度](http://www.cse.kyoto-su.ac.jp/~g0846020/keywords/cosinSimilarity.html)\n- [TF-IDF Cos 類似度推定法](http://qiita.com/nmbakfm/items/6bb91b89571dd68fcea6)\n\nこのブログは js + hugo で書いているので、\n[kuromoji](https://www.npmjs.com/package/kuromoji) のラッパー\n[kuromojin](https://www.npmjs.com/package/kuromojin) を使って形態素解析する。\n\n### コード解説\n\n[コード全体](https://github.com/mijime/mijime.github.io/blob/content/source/js/similarity/index.js)\n\nテキストを分解して、 単語と出現回数を記録する。\n\n```javascript\nasync function parseVector(text) {\n  const tokens = await tokenize(text)\n  return tokens.reduce((acc, next) => {\n    if (!isTargetToken(next)) {\n      return acc\n    }\n\n    if (acc[next.surface_form]) {\n      acc[next.surface_form]++\n    } else {\n      acc[next.surface_form] = 1\n    }\n\n    return acc\n  }, {})\n}\n```\n\n出現回数を数えるのは名詞で 3 文字以上の単語のみ。\n\n```javascript\nfunction isTargetToken(token) {\n  return (\n    token.pos === '名詞' &&\n    token.surface_form.length >= 3 &&\n    (token.basic_form !== '*' || token.surface_form.match(/^[\\wA-Z]+$/))\n  )\n}\n```\n\nあとは計算しておしまい。\n\n```javascript\nfunction cosineSimilarity(curr, next) {\n  const currKeys = Object.keys(curr)\n  const nextKeys = Object.keys(next)\n  const keys = currKeys\n    .concat(nextKeys)\n    .filter((v, i, self) => self.indexOf(v) === i)\n\n  const baseScore = keys\n    .map(k => (curr[k] || 0) * (next[k] || 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const currScore = keys\n    .map(k => (curr[k] ? Math.pow(curr[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const nextScore = keys\n    .map(k => (next[k] ? Math.pow(next[k], 2) : 0))\n    .reduce((acc, c) => acc + c, 0)\n\n  const score = baseScore\n    ? baseScore / (Math.sqrt(currScore) * Math.sqrt(nextScore))\n    : 0\n  const words = keys.filter(k => curr[k] && next[k])\n  return { score, words }\n}\n```\n\n### 実行結果\n\nうーん、全然関係ない単語でしか一致しない。その通りではあるんだけど。\n\n```\nbabel-node source/js/similarity \"content/posts/js/cosine-similarity.md\" \"content\"\n\n25.26%  content\\posts\\2016-05-23\\github-cli.md  com, https, mijime, github\n0%      content\\posts\\2016-05-26\\border-implement.md\n0%      content\\posts\\2016-05-26\\ci-is-difficult.md\n0%      content\\posts\\blog\\first-blogged.md\n0%      content\\posts\\hugo\\code-mermaid.md\n20.9%   content\\posts\\hugo\\hugo-deploy.md       branch, content\n100%    content\\posts\\js\\cosine-similarity.md   100, 2016, 89571, MeCab, コサイン\n9.93%   content\\posts\\blog\\blog-of-policy.md    branch, posts, slides\n1.98%   content\\posts\\hugo\\hugo-pagination.md   html, pagination\n3.52%   content\\slides\\2016-05-27\\my-first-slide.md     html\n```\n"}},"__N_SSG":true}