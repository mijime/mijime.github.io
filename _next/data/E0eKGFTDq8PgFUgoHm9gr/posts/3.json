{"pageProps":{"siteName":"My snippets","page":3,"pageSize":5,"posts":[{"title":"リモートワーク用の環境を構築するときはアカウントを分けるとよさそう","description":"\n最近リモート用の環境を私物の PC に構築した。\n\nその時にアカウントを分けて、ブックマークとか作業環境を混ざらないようにしたが\n色々やることがあったのでメモっておく\n\n<!--more-->\n\n#","createdAt":"2019-02-16T05:56:38.000Z","tags":["development"],"draft":false,"slug":"2019/02/16","content":"\n最近リモート用の環境を私物の PC に構築した。\n\nその時にアカウントを分けて、ブックマークとか作業環境を混ざらないようにしたが\n色々やることがあったのでメモっておく\n\n<!--more-->\n\n## brew の設定を分ける\n\nデフォルトだと `/usr/local` に全て入ってアカウント共有になってしまう。\n\nそうすると更新するたびに`sudo`権限を求められてしまうため、アカウント毎に `brew` を設定した。\n\n`brew` を別ディレクトリに置けば、勝手に`BREW_HOME`を親ディレクトリに設定してくれる。\n\n```bash\nmkdir -p \"${HOME}/.brew\"\ncurl -L https://github.com/Homebrew/brew/archive/master.tar.gz \\\n         | tar xz --strip-components=1 -C \"${HOME}/.brew\"\nexport PATH=${HOME}/.brew/bin:${PATH}\n```\n\n## dotfiles を共有する\n\n会社用の Github アカウントを新規で作成したが、さすがに dotfiles は常々更新するので、\n同じものを使いたい。\n\n`git config core.sshCommand`で個別に鍵を指定した。\n\n```bash\nmkdir -p ~/.ssh/projects/github.com/\nssh-keygen -t ed25519 -N \"\" -C \"\" -f ~/.ssh/projects/github.com/${USER}_id_ed25519\ngit config core.sshCommand \"ssh -i ~/.ssh/projects/github.com/${USER}_id_ed25519\"\n```\n\n## PS1 に icon を設定する\n\n`su` で雑にアカウントを往復することがあるんだけども、名前は違えど色味がほぼほぼ同じなので\n'あれ、どっちで作業しているんだっけ…'的なことが時々起こる\n\n名前からランダムに絵文字を設定してみた。\n\n```bash\nicon=$(echo -ne $((127744 + 16#$(whoami|md5sum|cut -c-8)%512))|awk '{printf(\"%3c\",$1)}')\n```\n\nこれを適当に PS1 に入れておけば、間違えにくくなる\n\n## セキュアなデータを GoogleDrive にいれて Git で管理する\n\nだいぶ Bad Practice な気がするが、パスワードとか ssh-key とかは全部 Git のリポジトリにして管理している。\n\nそれを一旦 GoogleDrive とかにぶち込んで別端末に持ってきた。\n\nさすがに内容が内容なので、`git encrypt` コマンドを作って暗号化してみた\n\nhttps://github.com/kojimat/git-encrypt\n"},{"title":"PelicanのPluginの作り方","description":"\nregister 関数を用意して、 各イベントの signals に `connect` する\n\n<!--more-->\n\n```python\nfrom pelican import signals","createdAt":"2017-10-22T12:32:19.000Z","tags":["pelican"],"draft":false,"slug":"python/create-pelican-plugin","content":"\nregister 関数を用意して、 各イベントの signals に `connect` する\n\n<!--more-->\n\n```python\nfrom pelican import signals\n\ndef register():\n  signals.content_object_init.connect(content_object_init_handler)\n\ndef content_object_init_handler(content):\n  pass\n```\n\nsignals は下記を参照\n\nhttp://docs.getpelican.com/en/3.7.1/plugins.html#list-of-signals\n\n`_content` や `_summary` を書き換える場合は以降のステージで行えば良いとのこと\n\nだが、一度も上手くいっていない\n"},{"title":"Gitがインストールされていない環境でログを取得し、ハンドリングする","description":"\nPython の dulwich を使う例が多い\n\n<!--more-->\n\n```python\nfrom dulwich.client import HttpGitClient\nfrom dulw","createdAt":"2017-10-22T12:25:19.000Z","tags":["git"],"draft":false,"slug":"python/git-fetch","content":"\nPython の dulwich を使う例が多い\n\n<!--more-->\n\n```python\nfrom dulwich.client import HttpGitClient\nfrom dulwich.repo import MemoryRepo\nfrom urllib.parse import urlparse\nimport itertools\n\ndef fetch_repo(repo=None, url=None):\n    url_object = urlparse(url)\n    client = HttpGitClient(\"://\".join([url_object.scheme, url_object.netloc]))\n    remote_refs = client.fetch(url_object.path, repo)\n    for ref, sha1 in remote_refs.items():\n        repo.refs[ref] = sha1\n    return repo\n\ndef get_first_commit_time(repo):\n    for entry in repo.get_walker():\n        return entry.commit.commit_time\n```\n\n## Reference\n\n- https://github.com/jelmer/dulwich\n- http://ijin.github.io/blog/2016/02/18/ssh-and-git-on-aws-lambda/\n- https://qiita.com/shibataka000/items/910754486ba2585209b2\n"},{"title":"Google tag manager の概要","description":"\nGoogle tag manager は HTML タグを動的に挿入するサービス。\n\n- 既存の HTML に手を加えなくても管理画面から追加できる\n- 挿入する HTML タグを一元に管理できる\n","createdAt":"2017-10-21T18:07:56.000Z","tags":[],"draft":false,"slug":"seo/about-gtm","content":"\nGoogle tag manager は HTML タグを動的に挿入するサービス。\n\n- 既存の HTML に手を加えなくても管理画面から追加できる\n- 挿入する HTML タグを一元に管理できる\n\nのが強み。\n\n挿入できる HTML タグのテンプレートが用意されており\n\n- google analytics\n- doubleclick\n\nなどはすぐに開始できる。\n\nカスタムの HTML を挿入することも可能。\n\n### Reference\n\n- https://www.google.com/intl/ja/analytics/tag-manager/\n"},{"title":"web-ext を使って WebExtension を始める","description":"\nweb extension 用のビルドツール `web-ext` があるらしい\n\n[web-ext](https://github.com/mozilla/web-ext)\n\nSigned, Deb","createdAt":"2017-10-13T16:38:45.000Z","tags":[],"draft":false,"slug":"js/getting-started-web-ext","content":"\nweb extension 用のビルドツール `web-ext` があるらしい\n\n[web-ext](https://github.com/mozilla/web-ext)\n\nSigned, Debug がメインのツール。\nビルドは主要ファイルを zip に入れるだけだった\n\n## Install\n\nYarn だと上手くいかない。..? ので `npm` でインストールする\n\n```bash\nnpm install --global web-ext\n```\n\n## Usage\n\nデバッグで確認する\n\n```bash\nweb-ext run --firefox=${FIREFOX_BIN}\n```\n\nビルドする\n\n```bash\nweb-ext build\nweb-ext sign --api-key ${API_KEY} --api-secret ${API_SECRET}\n```\n\n## Reference\n\n- https://github.com/mozilla/web-ext\n- https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Getting_started_with_web-ext\n"}],"postCount":31},"__N_SSG":true}