{"pageProps":{"posts":[{"title":"ReactでMarkdownEditorを作ったかんそう","description":"","date":"2017-04-09T22:40:10+09:00","tags":["development","react"],"draft":false,"slug":"2017/04/09/thoughts-on-react","content":"\n## 作ったもの\n\nhttps://github.com/mijime/markdown-editor\n\nダウンロードすればオフラインでも使えるマークダウンエディタを作りたかった\n\n---\n\n## 使ってよかったもの\n\n## Rehype, Remark\n\n- https://github.com/wooorm/rehype\n- https://github.com/wooorm/remark\n\nHTML や Markdown を AST に変換してくれる。\n\nMarked が String を既にがっちゃんこ状態で投げてくるので\ndangerouslySetInnerHTML を使わざるえない影響が出てくる。\n\nそういうときは上の Rehype, Remark で AST に変換してから React コンポーネントにするアプローチが良さげ。\n\nreact-markdown ていうのもあったけど commonmark に準拠してるらしく、テーブルの変換ができなかったので諦めた。\nあと commonmark が割と容量食ってたのもある。\n\nremark-react を使わなかったのは highlight 系のライブラリをかます必要があったのと\nmarkdown -> html -> react の流れのほうが拡張しやすく感じた。\n絵文字対応もさくっといけたし。\n\nなんかやるとき、もしくはデンジャラスなコードを強要されたときはまた使ってみたい。\n\nただ、 marked の方が軽量ではあったので、1 回きりの表示なら marked のほうが断然良さそう。\n\n## Prism.js\n\n- http://prismjs.com/\n\nhighlight.js を Minify すると中身が飛びでて辛いときに使ったやつ。\n\nプロセッサも分かれてるのでそのまま rehype に流せた。\n\nプラッガブルでなかなかに軽量なので、おすすめしていきたい。\n\n## Preact\n\n- https://preactjs.com/\n\nReact がでかすぎたので使って見た。\n\nwebpack-bundle-size-anlyzer をつかってサイズを比較した。\n\nReactDOM + React が 500+kb なのに対し、 Preact + Preact-compat が 35kb 前後？良い。\n\nReact-Redux は普通に使えたので、 問題はなかった。 React-helmet とか React-router 周りはまだ試していない。\nただ、Preact-helmet や Preact-router とかあるし、なんだかんだでまた使えそう。\n\ndio.js とかも同様も簡単に乗り換えられるか試したけど、 Preact-compat はだいぶ頑張っているのが分かっただけだった。\n\nJest や StyleGuidist なんかが React を強要するので、 Webpack でビルド時のみ差し替える運用にした。\n\n## milligram\n\n- https://milligram.github.io/\n\nマークダウンプレビューとしては綺麗に表示できるので、\nみんな Github.css から乗り換えるべきだと思う。軽量ですし。\n\nただ、シンプルなコンポーネントしかないので\nUI が複雑になってきたなら Material なんちゃら系の方が良さそう、とは思う\n\n---\n\n## 見送ったもの\n\n## highlight.js\n\nみんな言語絞って使ってるくさい。最初、何度圧縮してもクソでかくて不思議だった。\n言語によっては圧縮時に飛び出る。 と思ったけど browserify 使った時は問題なさそう。. だった？\n\n使うのやめた。\n\n## CodeMirror\n\n重量がなかなかあったので、採用を見送った。 vim mode 試したかった。\n\nもっと軽量なエディタがあれば選択肢に入れたかったので、あとで探す。\n\n---\n\n## React.setState\n\nReact の setState は使わずに pure component だけで構成したかったので。\n\n非同期に描画してコンポーネント内だけで完結するなら、 state を使って書いた方が切り出しやすかった。\n\n## Flow\n\n今回は頑張って Flowtype に立ち向かってみた。 Flow-jsdoc で JSDoc と同期をとりつつ、みたいなことを実現したかったが、\ntype 周りが対応してなかったので結局 flow-comment をちりばめながら書くはめになった。\n\nあと、flow さんって commonjs スタイル読み取ってくれないのが一番のショックだった。\nその他にも、他のライブラリの \\*.flow にビンビン反応していくのもちょいちょい辛い。\n"}],"postCount":1,"page":1,"tagName":"react"},"__N_SSG":true}